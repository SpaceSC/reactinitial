{"version":3,"sources":["components/LoadingMask.jsx","components/Subscription.jsx","components/Hotel.jsx","App.js","api/mockserver.js","index.js"],"names":["LoadingMask","Subscription","hotel","useState","valid","setValid","userEmail","setUserEmail","showSubscribe","setShowSubscribe","result","setResult","showResult","setShowResult","onSubmit","e","preventDefault","data","email","name","fetch","method","headers","body","JSON","stringify","then","response","json","success","finally","setTimeout","type","id","onInput","target","value","includes","disabled","Hotel","show","setShow","subscribe","setSubscribe","onClick","city","stars","App","isLoaded","setIsLoaded","hotels","setHotels","useEffect","res","error","console","log","className","map","environment","server","createServer","models","Model","seeds","create","routes","this","namespace","timing","get","schema","request","all","post","attrs","parse","requestBody","makeServer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3e1e6dd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction LoadingMask() {\r\n\r\n  return (\r\n    <div>\r\n      Loading...\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoadingMask;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport LoadingMask from './LoadingMask';\r\n\r\nfunction Subscription({hotel}) {\r\n  const [ valid, setValid ] = useState(false);\r\n  const [ userEmail, setUserEmail ] = useState(\"\");\r\n  const [ showSubscribe, setShowSubscribe ] = useState(true);\r\n  const [ result, setResult ] = useState(false);\r\n  const [ showResult, setShowResult ] = useState(true);\r\n\r\n  function validate(e) {\r\n    setUserEmail(e.target.value);\r\n    if(e.target.value.includes(\".\") && e.target.value.includes(\"@\")){\r\n      setValid(true);\r\n    }else{\r\n      setValid(false);\r\n    }\r\n  }\r\n\r\n  function submitted(e){\r\n    e.preventDefault();\r\n   \r\n    const data = { \r\n      email: userEmail, \r\n      hotel: hotel.name, \r\n    };\r\n    \r\n    setShowSubscribe(false);\r\n    \r\n    fetch('api/hotels/subscribe', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(data),\r\n      })\r\n      .then(response => response.json())\r\n      .then((data) =>{\r\n        if(data.success) {\r\n          setResult(\"Subscribed\");\r\n          // console.log(data); // { success: true }\r\n          } else {\r\n          setResult(\"Already subscribed\");\r\n          }\r\n      })\r\n      .finally(()=> setTimeout(() => {\r\n        setShowSubscribe(false);\r\n        setShowResult(false);\r\n      }, 5000));\r\n    }\r\n\r\n  return (\r\n    <>\r\n    {showResult ?\r\n    showSubscribe ?\r\n      <div>\r\n        <form onSubmit={submitted}>\r\n        <input type=\"email\" id=\"email\" name=\"email\" onInput={validate}/>\r\n        {valid ? <button>Subscribe</button> : <button disabled>Subscribe</button>}\r\n        </form>\r\n      </div>\r\n    : !result ? <LoadingMask/> : <p>{result}</p>\r\n    : \"\"\r\n    }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Subscription;\r\n\r\n//!result ? <LoadingMask/> : <p>{result}</p>\r\n//: \"\"\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Subscription from \"./Subscription\";\r\n\r\nfunction Hotel({hotel}) {\r\n  const [ show, setShow ] = useState(false);\r\n  const [subscribe, setSubscribe] = useState(false);\r\n  \r\n  return (\r\n    <div>\r\n      <p>{hotel.name}</p>\r\n      {show ? <button onClick={() => {setShow(false)}}>Show less</button>: <button onClick={() => {setShow(true)}}>Show more</button>}\r\n      {show && <p>{hotel.city} ({hotel.stars})</p>}\r\n      {show && <button onClick={() => {setSubscribe(true)}}>Request more info</button>}\r\n      {subscribe && \r\n      <div>\r\n        <h2>Request more info about {hotel.name}</h2>\r\n        <Subscription key={hotel.name} hotel={hotel} setSubscribe={setSubscribe}/>\r\n      </div>\r\n      }\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Hotel;\r\n","import './App.css'\r\nimport React, { useState, useEffect } from \"react\";\r\nimport LoadingMask from './components/LoadingMask';\r\nimport Hotel from './components/Hotel';\r\n\r\nconst App = () => {\r\n\r\n  const [ isLoaded, setIsLoaded ] = useState(false);\r\n  const [ hotels, setHotels ] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch(\"api/hotels\")\r\n    .then(res => res.json())\r\n    .then(\r\n      (result) => {\r\n        setIsLoaded(true);\r\n        setHotels(result);\r\n      },\r\n      (error) => {\r\n        console.log(error);\r\n        setIsLoaded(true);\r\n      }\r\n    )\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hotels</h1>\r\n      {!isLoaded && <LoadingMask/>}\r\n      {hotels.map((hotel) => (<Hotel key={hotel.name} hotel={hotel}/>))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { createServer, Model } from 'miragejs';\r\nexport function makeServer({ environment = 'test' } = {}) {\r\n  let server = createServer({\r\n    environment,\r\n    models: {\r\n      hotel: Model,\r\n    },\r\n    seeds(server) {\r\n      server.create('hotel', {\r\n        name: 'Hotel Nulla sit amet',\r\n        stars: 3,\r\n        city: \"Los Angeles\",\r\n      });\r\n      server.create('hotel', {\r\n        name: 'Hotel Curabitur suscipit suscipit',\r\n        stars: 4,\r\n        city: \"Las Vegas\",\r\n      });\r\n      server.create('hotel', {\r\n        name: 'Hotel Donec id justo',\r\n        stars: 5,\r\n        city: \"San Francisco\",\r\n      });\r\n    },\r\n    routes() {\r\n      this.namespace = 'api/hotels';\r\n      this.timing = 2000\r\n\r\n      this.get('/', (schema, request) => {\r\n        return schema.hotels.all().models;\r\n      });\r\n      this.post('/subscribe', (schema, request) => {\r\n        let attrs = JSON.parse(request.requestBody);\r\n        if (attrs.email === \"a@b.c\" && attrs.hotel === \"Hotel Curabitur suscipit suscipit\") {\r\n          return { success: false };\r\n        }\r\n        return  { success: true };\r\n      });\r\n    },\r\n  });\r\n  return server;\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nimport { makeServer } from './api/mockserver'\r\nmakeServer({ environment: 'development' })\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}